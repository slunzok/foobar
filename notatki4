Rails 3.1.3

Chapter 7

1) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rake db:reset
2) #spec/models/user_spec.rb (teraz juz 12 testow)

require 'spec_helper'

describe User do

  before(:each) do
    @attr = {
      :name => "Example User",
      :email => "user@example.com",
      :password => "foobar",
      :password_confirmation => "foobar"
    }
  end

  it "should create a new instance given valid attributes" do
    User.create!(@attr)
  end
  .
  .
  .
  describe "password validations" do

    it "should require a password" do
      User.new(@attr.merge(:password => "", :password_confirmation => "")).
        should_not be_valid
    end

    it "should require a matching password confirmation" do
      User.new(@attr.merge(:password_confirmation => "invalid")).
        should_not be_valid
    end

    it "should reject short passwords" do
      short = "a" * 5
      hash = @attr.merge(:password => short, :password_confirmation => short)
      User.new(hash).should_not be_valid
    end

    it "should reject long passwords" do
      long = "a" * 41
      hash = @attr.merge(:password => long, :password_confirmation => long)
      User.new(hash).should_not be_valid
    end
  end
end

3) #app/models/user.rb

class User < ActiveRecord::Base
	attr_accessor :password
  attr_accessible :name, :email, :password, :password_confirmation
  
  email_regex = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  
	validates :name, :presence => true, 
									 :length   => { :maximum => 50 }
	validates :email, :presence => true, 
										:format   => { :with => email_regex }, 
										:uniqueness => { :case_sensitive => false }
	
	# Automatically create the virtual attribute 'password_confirmation'.
  validates :password, :presence     => true,
                       :confirmation => true,
                       :length       => { :within => 6..40 }
end

4) #spec/models/user_spec.rb (13 testow)

describe User do
  .
  .
  .
  describe "password encryption" do

    before(:each) do
      @user = User.create!(@attr)
    end

    it "should have an encrypted password attribute" do
      @user.should respond_to(:encrypted_password)
    end
  end
end

5) kuba@traktor:~/rails_projekty/sample_app$ rails g migration add_password_to_users encrypted_password:string
6) #db/migrate/<timestamp>_add_password_to_users.rb

class AddPasswordToUsers < ActiveRecord::Migration
  def change
    add_column :users, :encrypted_password, :string
  end
end

7) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rake db:migrate
8) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rake db:test:prepare
9) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rspec spec/models/user_spec.rb -e "should have an encrypted password attribute"
10) #spec/models/user_spec.rb (14 :P)

describe User do
  .
  .
  .
  describe "password encryption" do

    before(:each) do
      @user = User.create!(@attr)
    end
    .
    .
    .
    it "should set the encrypted password" do
      @user.encrypted_password.should_not be_blank
    end
  end
end

11) #app/models/user.rb

class User < ActiveRecord::Base
  .
  .
  .
  validates :password, :presence     => true,
                       :confirmation => true,
                       :length       => { :within => 6..40 }

  before_save :encrypt_password

  private

    def encrypt_password
      self.encrypted_password = encrypt(password)
    end

    def encrypt(string)
      string # Only a temporary implementation!
    end
end

12) #app/models/user.rb

class User < ActiveRecord::Base
  .
  .
  .
  before_save :encrypt_password

  # Return true if the user's password matches the submitted password.
  def has_password?(submitted_password)
    # Compare encrypted_password with the encrypted version of
    # submitted_password.
  end

  private
  .
  .
  .
end

13) #spec/models/user_spec.rb (juz 16)

describe User do
  .
  .
  .
  describe "password encryption" do

    before(:each) do
      @user = User.create!(@attr)
    end
    .
    .
    .
    describe "has_password? method" do

      it "should be true if the passwords match" do
        @user.has_password?(@attr[:password]).should be_true
      end    

      it "should be false if the passwords don't match" do
        @user.has_password?("invalid").should be_false
      end 
    end
  end
end

14) #app/models/user.rb

def has_password?(submitted_password)
  encrypted_password == encrypt(submitted_password)
end

15) kuba@traktor:~/rails_projekty/sample_app$ rails g migration add_salt_to_users salt:string
16) #db/migrate/<timestamp>_add_salt_to_users.rb

class AddSaltToUsers < ActiveRecord::Migration
  def change
    add_column :users, :salt, :string
  end
end

17) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rake db:migrate
18) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rake db:test:prepare
19) #app/models/user.rb

require 'digest'
class User < ActiveRecord::Base
  .
  .
  .
  before_save :encrypt_password

  def has_password?(submitted_password)
    encrypted_password == encrypt(submitted_password)
  end

  private

    def encrypt_password
      self.salt = make_salt unless has_password?(password)
      self.encrypted_password = encrypt(password)
    end

    def encrypt(string)
      secure_hash("#{salt}--#{string}")
    end

    def make_salt
      secure_hash("#{Time.now.utc}--#{password}")
    end

    def secure_hash(string)
      Digest::SHA2.hexdigest(string)
    end
end

20) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rspec spec/models/user_spec.rb -e "should be true if the passwords match"
21) kuba@traktor:~/rails_projekty/sample_app$  bundle exec rspec spec/models/user_spec.rb -e "should be false if the passwords don't match"
22) #spec/models/user_spec.rb (ah 19 :P)

describe User do
  .
  .
  .
  describe "password encryption" do
    .
    .
    .
    describe "authenticate method" do

      it "should return nil on email/password mismatch" do
        wrong_password_user = User.authenticate(@attr[:email], "wrongpass")
        wrong_password_user.should be_nil
      end

      it "should return nil for an email address with no user" do
        nonexistent_user = User.authenticate("bar@foo.com", @attr[:password])
        nonexistent_user.should be_nil
      end

      it "should return the user on email/password match" do
        matching_user = User.authenticate(@attr[:email], @attr[:password])
        matching_user.should == @user
      end
    end
  end
end

23) #app/models/user.rb

class User < ActiveRecord::Base
  .
  .
  .
  def has_password?(submitted_password)
    encrypted_password == encrypt(submitted_password)
  end

  def self.authenticate(email, submitted_password)
    user = find_by_email(email)
    return nil  if user.nil?
    return user if user.has_password?(submitted_password)
  end

  private
  .
  .
  .
end

24) #spec/controllers/users_controller_spec.rb (current :P)

require 'spec_helper'

describe UsersController do
  render_views

  describe "GET 'new'" do
    it "should be successful" do
      get 'new'
      response.should be_success
    end
    
    it "should have the right title" do
      get 'new'
      response.should have_selector("title", :content => "Sign up")
    end
  end
end

25) #app/controllers/users_controller.rb

class UsersController < ApplicationController

  def show
    @user = User.find(params[:id])
  end
  .
  .
  .
end

26) geany Gemfile (i bundle install oczywiscie :D)

group :test do
  gem 'rspec-rails', '2.6.1'
  gem 'webrat', '0.7.1'
  gem 'factory_girl_rails', '1.0'
end

27) #spec/factories.rb

# By using the symbol ':user', we get Factory Girl to simulate the User model.
Factory.define :user do |user|
  user.name                  "kuba"
  user.email                 "slunzok@gmail.com"
  user.password              "foobar"
  user.password_confirmation "foobar"
end

28) #spec/controllers/users_controller_spec.rb (4 testy)

	describe "GET 'show'" do
    
    before(:each) do
      @user = Factory(:user)
    end
    
    it "should be successful" do
      get :show, :id => @user
      response.should be_success
    end

    it "should find the right user" do
      get :show, :id => @user
      assigns(:user).should == @user
    end
  end

29) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rspec spec/controllers/users_controller_spec.rb (dziala!)
30) kuba@traktor:~/rails_projekty/sample_app$ bundle exec rake db:reset
31) kuba@traktor:~/rails_projekty/sample_app$ rails console
User.create!(:name =Loading development environment (Rails 3.1.3)
1.9.2-p290 :001 > User.create!(:name => "kuba", :email => "slunzok@gmail.com", :password => "foobar", :password_confirmation => "foobar")
   (0.4ms)  SELECT 1 FROM "users" WHERE LOWER("users"."email") = LOWER('slunzok@gmail.com') LIMIT 1
Binary data inserted for `string` type on column `encrypted_password`
Binary data inserted for `string` type on column `salt`
  SQL (9.4ms)  INSERT INTO "users" ("created_at", "email", "encrypted_password", "name", "salt", "updated_at") VALUES (?, ?, ?, ?, ?, ?)  [["created_at", Wed, 28 Dec 2011 19:58:07 UTC +00:00], ["email", "slunzok@gmail.com"], ["encrypted_password", "1ec46f837856bf6b4cfd7f89b2c0a98ee1f7d6b312f654d9f637f744901838e7"], ["name", "kuba"], ["salt", "dfc58774fabd9c72846b37c329a81646163e2c7875f3f4ac9bc9fd1e03e66c8f"], ["updated_at", Wed, 28 Dec 2011 19:58:07 UTC +00:00]]
 => #<User id: 1, name: "kuba", email: "slunzok@gmail.com", created_at: "2011-12-28 19:58:07", updated_at: "2011-12-28 19:58:07", encrypted_password: "1ec46f837856bf6b4cfd7f89b2c0a98ee1f7d6b312f654d9f63...", salt: "dfc58774fabd9c72846b37c329a81646163e2c7875f3f4ac9bc..."> 

32) #spec/controllers/users_controller_spec.rb (teraz juz 7)

		it "should have the right title" do
      get :show, :id => @user
      response.should have_selector("title", :content => @user.name)
    end

    it "should include the user's name" do
      get :show, :id => @user
      response.should have_selector("h1", :content => @user.name)
    end

    it "should have a profile image" do
      get :show, :id => @user
      response.should have_selector("h1>img", :class => "gravatar")
    end
    
33) #app/controllers/users_controller.rb

class UsersController < ApplicationController

  def show
    @user = User.find(params[:id])
    @title = @user.name
  end
  .
  .
  .
end

34) #app/views/users/show.html.erb

<h1>
  <%= @user.name %>
</h1>

35) geany Gemfile (i bundle install)

gem 'rails', '3.1.3'
gem 'sqlite3'
gem 'gravatar_image_tag', '1.0.0.pre2'

36) #app/views/users/show.html.erb

<h1>
  <%= gravatar_image_tag @user.email, :class => "gravatar" %>
  <%= @user.name %>
</h1>

37) #app/views/users/show.html.erb

<%= gravatar_for @user %>

38) #app/helpers/users_helper.rb

module UsersHelper

  def gravatar_for(user, options = { :size => 50 })
    gravatar_image_tag(user.email.downcase, :alt => h(user.name),
                                            :class => 'gravatar',
                                            :gravatar => options)
  end
end

39) #app/views/users/show.html.erb

<%= gravatar_for @user, :size => 30 %>

40) #app/views/users/show.html.erb

<table class="profile" summary="Profile information">
  <tr>
    <td class="main">
      <h1>
        <%= gravatar_for @user %>
        <%= @user.name %>
      </h1>
    </td>
    <td class="sidebar round">
      <strong>Name</strong> <%= @user.name %><br />
      <strong>URL</strong>  <%= link_to user_path(@user), @user %>
    </td>
  </tr>
</table>

41) #public/stylesheets/custom.css

/* User show page */

table.profile {
  width: 100%;
  margin-bottom: 0;
}

td.main {
  width: 70%;
  padding: 1em;
}

td.sidebar {
  width: 30%;
  padding: 1em;
  vertical-align: top;
  background: #ffc;
}

.profile img.gravatar {
  border: 1px solid #999;
  margin-bottom: -15px;
}





